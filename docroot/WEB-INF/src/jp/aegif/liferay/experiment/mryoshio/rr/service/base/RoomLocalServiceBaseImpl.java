/**
 * Copyright (c) 2011 Aegif Corporation. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
package jp.aegif.liferay.experiment.mryoshio.rr.service.base;

import com.liferay.counter.service.CounterLocalService;

import com.liferay.portal.kernel.annotation.BeanReference;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.service.ResourceLocalService;
import com.liferay.portal.service.ResourceService;
import com.liferay.portal.service.UserLocalService;
import com.liferay.portal.service.UserService;
import com.liferay.portal.service.persistence.ResourcePersistence;
import com.liferay.portal.service.persistence.UserPersistence;

import jp.aegif.liferay.experiment.mryoshio.rr.model.Room;
import jp.aegif.liferay.experiment.mryoshio.rr.service.ReservationLocalService;
import jp.aegif.liferay.experiment.mryoshio.rr.service.RoomLocalService;
import jp.aegif.liferay.experiment.mryoshio.rr.service.persistence.ReservationPersistence;
import jp.aegif.liferay.experiment.mryoshio.rr.service.persistence.RoomPersistence;

import java.util.List;

import javax.sql.DataSource;

/**
 * The base implementation of the room local service.
 * 
 * <p>
 * This implementation exists only as a container for the default service
 * methods generated by ServiceBuilder. All custom service methods should be put
 * in
 * {@link jp.aegif.liferay.experiment.mryoshio.rr.service.impl.RoomLocalServiceImpl}
 * .
 * </p>
 * 
 * <p>
 * Never modify or reference this class directly. Always use
 * {@link jp.aegif.liferay.experiment.mryoshio.rr.service.RoomLocalServiceUtil}
 * to access the room local service.
 * </p>
 * 
 * @author ashitaba.yoshioka@aegif.jp
 * @see jp.aegif.liferay.experiment.mryoshio.rr.service.impl.RoomLocalServiceImpl
 * @see jp.aegif.liferay.experiment.mryoshio.rr.service.RoomLocalServiceUtil
 * @generated
 */
public abstract class RoomLocalServiceBaseImpl implements RoomLocalService {
	/**
	 * Adds the room to the database. Also notifies the appropriate model
	 * listeners.
	 * 
	 * @param room
	 *            the room to add
	 * @return the room that was added
	 * @throws SystemException
	 *             if a system exception occurred
	 */
	public Room addRoom(Room room) throws SystemException {
		room.setNew(true);

		return roomPersistence.update(room, false);
	}

	/**
	 * Creates a new room with the primary key. Does not add the room to the
	 * database.
	 * 
	 * @param roomId
	 *            the primary key for the new room
	 * @return the new room
	 */
	public Room createRoom(int roomId) {
		return roomPersistence.create(roomId);
	}

	/**
	 * Deletes the room with the primary key from the database. Also notifies
	 * the appropriate model listeners.
	 * 
	 * @param roomId
	 *            the primary key of the room to delete
	 * @throws PortalException
	 *             if a room with the primary key could not be found
	 * @throws SystemException
	 *             if a system exception occurred
	 */
	public void deleteRoom(int roomId) throws PortalException, SystemException {
		roomPersistence.remove(roomId);
	}

	/**
	 * Deletes the room from the database. Also notifies the appropriate model
	 * listeners.
	 * 
	 * @param room
	 *            the room to delete
	 * @throws SystemException
	 *             if a system exception occurred
	 */
	public void deleteRoom(Room room) throws PortalException, SystemException {
		roomPersistence.remove(room);
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 * 
	 * @param dynamicQuery
	 *            the dynamic query to search with
	 * @return the matching rows
	 * @throws SystemException
	 *             if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery) throws SystemException {
		return roomPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the
	 * matching rows.
	 * 
	 * <p>
	 * Useful when paginating results. Returns a maximum of
	 * <code>end - start</code> instances. <code>start</code> and
	 * <code>end</code> are not primary keys, they are indexes in the result
	 * set. Thus, <code>0</code> refers to the first result in the set. Setting
	 * both <code>start</code> and <code>end</code> to
	 * {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return
	 * the full result set.
	 * </p>
	 * 
	 * @param dynamicQuery
	 *            the dynamic query to search with
	 * @param start
	 *            the lower bound of the range of model instances to return
	 * @param end
	 *            the upper bound of the range of model instances to return (not
	 *            inclusive)
	 * @return the range of matching rows
	 * @throws SystemException
	 *             if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
			throws SystemException {
		return roomPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of
	 * the matching rows.
	 * 
	 * <p>
	 * Useful when paginating results. Returns a maximum of
	 * <code>end - start</code> instances. <code>start</code> and
	 * <code>end</code> are not primary keys, they are indexes in the result
	 * set. Thus, <code>0</code> refers to the first result in the set. Setting
	 * both <code>start</code> and <code>end</code> to
	 * {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return
	 * the full result set.
	 * </p>
	 * 
	 * @param dynamicQuery
	 *            the dynamic query to search with
	 * @param start
	 *            the lower bound of the range of model instances to return
	 * @param end
	 *            the upper bound of the range of model instances to return (not
	 *            inclusive)
	 * @param orderByComparator
	 *            the comparator to order the results by
	 * @return the ordered range of matching rows
	 * @throws SystemException
	 *             if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
			OrderByComparator orderByComparator) throws SystemException {
		return roomPersistence.findWithDynamicQuery(dynamicQuery, start, end,
				orderByComparator);
	}

	/**
	 * Counts the number of rows that match the dynamic query.
	 * 
	 * @param dynamicQuery
	 *            the dynamic query to search with
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException
	 *             if a system exception occurred
	 */
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
			throws SystemException {
		return roomPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Gets the room with the primary key.
	 * 
	 * @param roomId
	 *            the primary key of the room to get
	 * @return the room
	 * @throws PortalException
	 *             if a room with the primary key could not be found
	 * @throws SystemException
	 *             if a system exception occurred
	 */
	public Room getRoom(int roomId) throws PortalException, SystemException {
		return roomPersistence.findByPrimaryKey(roomId);
	}

	/**
	 * Gets a range of all the rooms.
	 * 
	 * <p>
	 * Useful when paginating results. Returns a maximum of
	 * <code>end - start</code> instances. <code>start</code> and
	 * <code>end</code> are not primary keys, they are indexes in the result
	 * set. Thus, <code>0</code> refers to the first result in the set. Setting
	 * both <code>start</code> and <code>end</code> to
	 * {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return
	 * the full result set.
	 * </p>
	 * 
	 * @param start
	 *            the lower bound of the range of rooms to return
	 * @param end
	 *            the upper bound of the range of rooms to return (not
	 *            inclusive)
	 * @return the range of rooms
	 * @throws SystemException
	 *             if a system exception occurred
	 */
	public List<Room> getRooms(int start, int end) throws SystemException {
		return roomPersistence.findAll(start, end);
	}

	/**
	 * Gets the number of rooms.
	 * 
	 * @return the number of rooms
	 * @throws SystemException
	 *             if a system exception occurred
	 */
	public int getRoomsCount() throws SystemException {
		return roomPersistence.countAll();
	}

	/**
	 * Updates the room in the database. Also notifies the appropriate model
	 * listeners.
	 * 
	 * @param room
	 *            the room to update
	 * @return the room that was updated
	 * @throws SystemException
	 *             if a system exception occurred
	 */
	public Room updateRoom(Room room) throws SystemException {
		room.setNew(false);

		return roomPersistence.update(room, true);
	}

	/**
	 * Updates the room in the database. Also notifies the appropriate model
	 * listeners.
	 * 
	 * @param room
	 *            the room to update
	 * @param merge
	 *            whether to merge the room with the current session. See
	 *            {@link com.liferay.portal.service.persistence.BatchSession#update(com.liferay.portal.kernel.dao.orm.Session, com.liferay.portal.model.BaseModel, boolean)}
	 *            for an explanation.
	 * @return the room that was updated
	 * @throws SystemException
	 *             if a system exception occurred
	 */
	public Room updateRoom(Room room, boolean merge) throws SystemException {
		room.setNew(false);

		return roomPersistence.update(room, merge);
	}

	/**
	 * Gets the room local service.
	 * 
	 * @return the room local service
	 */
	public RoomLocalService getRoomLocalService() {
		return roomLocalService;
	}

	/**
	 * Sets the room local service.
	 * 
	 * @param roomLocalService
	 *            the room local service
	 */
	public void setRoomLocalService(RoomLocalService roomLocalService) {
		this.roomLocalService = roomLocalService;
	}

	/**
	 * Gets the room persistence.
	 * 
	 * @return the room persistence
	 */
	public RoomPersistence getRoomPersistence() {
		return roomPersistence;
	}

	/**
	 * Sets the room persistence.
	 * 
	 * @param roomPersistence
	 *            the room persistence
	 */
	public void setRoomPersistence(RoomPersistence roomPersistence) {
		this.roomPersistence = roomPersistence;
	}

	/**
	 * Gets the reservation local service.
	 * 
	 * @return the reservation local service
	 */
	public ReservationLocalService getReservationLocalService() {
		return reservationLocalService;
	}

	/**
	 * Sets the reservation local service.
	 * 
	 * @param reservationLocalService
	 *            the reservation local service
	 */
	public void setReservationLocalService(
			ReservationLocalService reservationLocalService) {
		this.reservationLocalService = reservationLocalService;
	}

	/**
	 * Gets the reservation persistence.
	 * 
	 * @return the reservation persistence
	 */
	public ReservationPersistence getReservationPersistence() {
		return reservationPersistence;
	}

	/**
	 * Sets the reservation persistence.
	 * 
	 * @param reservationPersistence
	 *            the reservation persistence
	 */
	public void setReservationPersistence(
			ReservationPersistence reservationPersistence) {
		this.reservationPersistence = reservationPersistence;
	}

	/**
	 * Gets the counter local service.
	 * 
	 * @return the counter local service
	 */
	public CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 * 
	 * @param counterLocalService
	 *            the counter local service
	 */
	public void setCounterLocalService(CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Gets the resource local service.
	 * 
	 * @return the resource local service
	 */
	public ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 * 
	 * @param resourceLocalService
	 *            the resource local service
	 */
	public void setResourceLocalService(
			ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Gets the resource remote service.
	 * 
	 * @return the resource remote service
	 */
	public ResourceService getResourceService() {
		return resourceService;
	}

	/**
	 * Sets the resource remote service.
	 * 
	 * @param resourceService
	 *            the resource remote service
	 */
	public void setResourceService(ResourceService resourceService) {
		this.resourceService = resourceService;
	}

	/**
	 * Gets the resource persistence.
	 * 
	 * @return the resource persistence
	 */
	public ResourcePersistence getResourcePersistence() {
		return resourcePersistence;
	}

	/**
	 * Sets the resource persistence.
	 * 
	 * @param resourcePersistence
	 *            the resource persistence
	 */
	public void setResourcePersistence(ResourcePersistence resourcePersistence) {
		this.resourcePersistence = resourcePersistence;
	}

	/**
	 * Gets the user local service.
	 * 
	 * @return the user local service
	 */
	public UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 * 
	 * @param userLocalService
	 *            the user local service
	 */
	public void setUserLocalService(UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Gets the user remote service.
	 * 
	 * @return the user remote service
	 */
	public UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 * 
	 * @param userService
	 *            the user remote service
	 */
	public void setUserService(UserService userService) {
		this.userService = userService;
	}

	/**
	 * Gets the user persistence.
	 * 
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 * 
	 * @param userPersistence
	 *            the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	/**
	 * Performs an SQL query.
	 * 
	 * @param sql
	 *            the sql query to perform
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = roomPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		} catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = RoomLocalService.class)
	protected RoomLocalService roomLocalService;
	@BeanReference(type = RoomPersistence.class)
	protected RoomPersistence roomPersistence;
	@BeanReference(type = ReservationLocalService.class)
	protected ReservationLocalService reservationLocalService;
	@BeanReference(type = ReservationPersistence.class)
	protected ReservationPersistence reservationPersistence;
	@BeanReference(type = CounterLocalService.class)
	protected CounterLocalService counterLocalService;
	@BeanReference(type = ResourceLocalService.class)
	protected ResourceLocalService resourceLocalService;
	@BeanReference(type = ResourceService.class)
	protected ResourceService resourceService;
	@BeanReference(type = ResourcePersistence.class)
	protected ResourcePersistence resourcePersistence;
	@BeanReference(type = UserLocalService.class)
	protected UserLocalService userLocalService;
	@BeanReference(type = UserService.class)
	protected UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
}