/**
 * Copyright (c) 2000-2010 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package jp.aegif.liferay.experiment.mryoshio.rr.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.util.PortalUtil;

import jp.aegif.liferay.experiment.mryoshio.rr.model.Reservation;
import jp.aegif.liferay.experiment.mryoshio.rr.model.ReservationModel;

import java.io.Serializable;

import java.lang.reflect.Proxy;

import java.sql.Types;

import java.util.Date;

/**
 * The base model implementation for the Reservation service. Represents a row in the &quot;rr_Reservation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link jp.aegif.liferay.experiment.mryoshio.rr.model.ReservationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ReservationImpl}.
 * </p>
 *
 * <p>
 * Never modify or reference this class directly. All methods that expect a reservation model instance should use the {@link jp.aegif.liferay.experiment.mryoshio.rr.model.Reservation} interface instead.
 * </p>
 *
 * @author ashitaba.yoshioka@aegif.jp
 * @see ReservationImpl
 * @see jp.aegif.liferay.experiment.mryoshio.rr.model.Reservation
 * @see jp.aegif.liferay.experiment.mryoshio.rr.model.ReservationModel
 * @generated
 */
public class ReservationModelImpl extends BaseModelImpl<Reservation>
	implements ReservationModel {
	public static final String TABLE_NAME = "rr_Reservation";
	public static final Object[][] TABLE_COLUMNS = {
			{ "reservationId", new Integer(Types.INTEGER) },
			{ "companyId", new Integer(Types.BIGINT) },
			{ "groupId", new Integer(Types.BIGINT) },
			{ "roomId", new Integer(Types.INTEGER) },
			{ "beginTime", new Integer(Types.TIMESTAMP) },
			{ "endTime", new Integer(Types.TIMESTAMP) },
			{ "userId", new Integer(Types.BIGINT) },
			{ "note", new Integer(Types.VARCHAR) }
		};
	public static final String TABLE_SQL_CREATE = "create table rr_Reservation (reservationId INTEGER not null primary key,companyId LONG,groupId LONG,roomId INTEGER,beginTime DATE null,endTime DATE null,userId LONG,note VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table rr_Reservation";
	public static final String ORDER_BY_JPQL = " ORDER BY reservation.roomId ASC, reservation.beginTime ASC, reservation.endTime ASC";
	public static final String ORDER_BY_SQL = " ORDER BY rr_Reservation.roomId ASC, rr_Reservation.beginTime ASC, rr_Reservation.endTime ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.jp.aegif.liferay.experiment.mryoshio.rr.model.Reservation"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.jp.aegif.liferay.experiment.mryoshio.rr.model.Reservation"),
			true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.jp.aegif.liferay.experiment.mryoshio.rr.model.Reservation"));

	public ReservationModelImpl() {
	}

	public int getPrimaryKey() {
		return _reservationId;
	}

	public void setPrimaryKey(int pk) {
		setReservationId(pk);
	}

	public Serializable getPrimaryKeyObj() {
		return new Integer(_reservationId);
	}

	public int getReservationId() {
		return _reservationId;
	}

	public void setReservationId(int reservationId) {
		_reservationId = reservationId;
	}

	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	public int getRoomId() {
		return _roomId;
	}

	public void setRoomId(int roomId) {
		_roomId = roomId;
	}

	public Date getBeginTime() {
		return _beginTime;
	}

	public void setBeginTime(Date beginTime) {
		_beginTime = beginTime;
	}

	public Date getEndTime() {
		return _endTime;
	}

	public void setEndTime(Date endTime) {
		_endTime = endTime;
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public String getNote() {
		if (_note == null) {
			return StringPool.BLANK;
		}
		else {
			return _note;
		}
	}

	public void setNote(String note) {
		_note = note;
	}

	public Reservation toEscapedModel() {
		if (isEscapedModel()) {
			return (Reservation)this;
		}
		else {
			return (Reservation)Proxy.newProxyInstance(Reservation.class.getClassLoader(),
				new Class[] { Reservation.class },
				new AutoEscapeBeanHandler(this));
		}
	}

	public Object clone() {
		ReservationImpl clone = new ReservationImpl();

		clone.setReservationId(getReservationId());
		clone.setCompanyId(getCompanyId());
		clone.setGroupId(getGroupId());
		clone.setRoomId(getRoomId());
		clone.setBeginTime(getBeginTime());
		clone.setEndTime(getEndTime());
		clone.setUserId(getUserId());
		clone.setNote(getNote());

		return clone;
	}

	public int compareTo(Reservation reservation) {
		int value = 0;

		if (getRoomId() < reservation.getRoomId()) {
			value = -1;
		}
		else if (getRoomId() > reservation.getRoomId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		value = DateUtil.compareTo(getBeginTime(), reservation.getBeginTime());

		if (value != 0) {
			return value;
		}

		value = DateUtil.compareTo(getEndTime(), reservation.getEndTime());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Reservation reservation = null;

		try {
			reservation = (Reservation)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		int pk = reservation.getPrimaryKey();

		if (getPrimaryKey() == pk) {
			return true;
		}
		else {
			return false;
		}
	}

	public int hashCode() {
		return getPrimaryKey();
	}

	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{reservationId=");
		sb.append(getReservationId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", roomId=");
		sb.append(getRoomId());
		sb.append(", beginTime=");
		sb.append(getBeginTime());
		sb.append(", endTime=");
		sb.append(getEndTime());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", note=");
		sb.append(getNote());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("jp.aegif.liferay.experiment.mryoshio.rr.model.Reservation");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>reservationId</column-name><column-value><![CDATA[");
		sb.append(getReservationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>roomId</column-name><column-value><![CDATA[");
		sb.append(getRoomId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>beginTime</column-name><column-value><![CDATA[");
		sb.append(getBeginTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endTime</column-name><column-value><![CDATA[");
		sb.append(getEndTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>note</column-name><column-value><![CDATA[");
		sb.append(getNote());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private int _reservationId;
	private long _companyId;
	private long _groupId;
	private int _roomId;
	private Date _beginTime;
	private Date _endTime;
	private long _userId;
	private String _userUuid;
	private String _note;
}